#! /bin/sh

machinename=mchale-dev
project=cloud9-dev
yaml=xfce.yaml
user=ryan.mchale@networkedinsights.com
serviceaccount=857626518705-compute@developer.gserviceaccount.com
 
 while :; do
     case $1 in
         -m|--machine)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
                 machinename=$2
                 shift
             else
                 die 'ERROR: "--machine" requires a non-empty option argument.'
             fi
             ;;
         --machine=?*)
             machinename=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --machine=)         # Handle the case of an empty --file=
             die 'ERROR: "--machine" requires a non-empty option argument.'
             ;;
         -p|--project)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
                 project=$2
                 shift
             else
                 die 'ERROR: "--project" requires a non-empty option argument.'
             fi
             ;;
         --project=?*)
             project=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --project=)         # Handle the case of an empty --file=
             die 'ERROR: "--project" requires a non-empty option argument.'
             ;;
         -y|--yaml)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
                 yaml=$2
                 shift
             else
                 die 'ERROR: "--yaml" requires a non-empty option argument.'
             fi
             ;;
         --yaml=?*)
             yaml=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --yaml=)         # Handle the case of an empty --file=
             die 'ERROR: "--yaml" requires a non-empty option argument.'
             ;;
         -u|--user)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
                 user=$2
                 shift
             else
                 die 'ERROR: "--user" requires a non-empty option argument.'
             fi
             ;;
         --user=?*)
             user=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --user=)         # Handle the case of an empty --file=
             die 'ERROR: "--user" requires a non-empty option argument.'
             ;;
         --serviceaccount)       # Takes an option argument; ensure it has been specified.
             if [ "$2" ]; then
                 serviceaccount=$2
                 shift
             else
                 die 'ERROR: "--serviceaccount" requires a non-empty option argument.'
             fi
             ;;
         --serviceaccount=?*)
             serviceaccount=${1#*=} # Delete everything up to "=" and assign the remainder.
             ;;
         --serviceaccount=)         # Handle the case of an empty --file=
             die 'ERROR: "--serviceaccount" requires a non-empty option argument.'
             ;;
         -v|--verbose)
             verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
             ;;
         --)              # End of all options.
             shift
             break
             ;;
         -?*)
             printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
             ;;
         *)               # Default case: No more options, so break out of the loop.
             break
     esac
 
     shift
 done

# --subnet "cloud9-dev-subnet-a"
# --service-account "857626518705-compute@developer.gserviceaccount.com"

gcloud config set account $user
gcloud config set project $project
machine=$(gcloud compute instances list --project=$project |grep $machinename |awk '{ print $6 }')
if [ -z "$machine" ]; then 
	gcloud beta compute --project "$project" instances create "$machinename"  --preemptible --zone "us-central1-f" --machine-type "n1-standard-2"  --scopes "https://www.googleapis.com/auth/cloud-platform" --min-cpu-platform "Automatic" --image "ubuntu-1710-artful-v20180405" --image-project "ubuntu-os-cloud" --boot-disk-size "200" --boot-disk-type "pd-ssd" --boot-disk-device-name "$machinename"
	sleep 30
fi
ansible-playbook -v -i `gcloud compute instances list --project=$project |grep $machinename |awk '{ print $6 }'`, $yaml
