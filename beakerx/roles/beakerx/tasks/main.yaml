---
- name: install bzip2
  apt:
    name: bzip2
    state: present

- name: install git
  apt:
    name: git
    state: present

- name: anaconda_exists
  shell: test -f "$(which conda)" && echo "yes" || echo "no"
  register: conda_exists

- name: anaconda_downloaded
  shell: test -f Anaconda3-5.1.0-Linux-x86_64.sh && echo "yes" || echo "no"
  register: conda_downloaded
  when: conda_exists.stdout == "no"


- name: download conda
  shell: wget https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh
  when: conda_downloaded.stdout == "no"

- name: check conda install
  shell: test -d $HOME/anaconda && echo "yes" || echo "no"
  become_user: rmchale
  register: conda_installed  

- name: install conda
  shell: bash Anaconda3-5.1.0-Linux-x86_64.sh -b -p $HOME/anaconda
  become_user: rmchale
  when: conda_installed.stdout == "no"

- name: conda bashrc check
  shell:  grep -q "anaconda" .bashrc && echo "yes" || echo "no"
  register: conda_bash_exists


- name: conda bashrc install
# shell: echo "nameserver 192.168.200.75" >> /etc/resolv.conf
  lineinfile: dest=$HOME/.bashrc
               line='export PATH="$HOME/anaconda/bin:$PATH"'
               state=present
  when: conda_bash_exists.stdout == "no"
  become_user: rmchale

- name: conda env labx check
  shell:  test -d $HOME/anaconda/envs/labx && echo "yes" || echo "no"
  register: labx_env_exists
  become_user: rmchale

- name: install exists
  shell: test -f install.sh && echo "yes" || echo "no"
  register: install_exists
  become_user: rmchale

- name: create install
  copy: 
    dest: $HOME/install.sh
    mode: 0755
    content: |
      #! /bin/bash
      export PATH="$HOME/anaconda/bin:$PATH"
      conda create -y -n labx 'python>=3'
      source activate labx
      source activate lab && conda config --env --add pinned_packages 'openjdk>8.0.121'
      source activate lab && conda install -y nodejs
      source activate lab && conda install -n labx -y -c conda-forge jupyterlab beakerx
      source activate lab && jupyter labextension install @jupyter-widgets/jupyterlab-manager
      source activate lab && jupyter labextension install beakerx-jupyterlab
      exit 0  
  when: install_exists.stdout == "no"
  become_user: rmchale 

- name: create env
  shell: export PATH="$HOME/anaconda/bin:$PATH" && conda create -y -n labx 'python>=3'
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: conda pinned_packages
  shell: export PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && conda config --env --add pinned_packages 'openjdk>8.0.121'
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: conda install nodejs
  shell: export PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && conda install -y nodejs
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: jupyter beakerx
  shell: export PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && conda install -y -c conda-forge jupyterlab beakerx
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: jupyter extension 1
  shell: export PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && jupyter labextension install @jupyter-widgets/jupyterlab-manager
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: jupyter extension 2
  shell: export PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && jupyter labextension install beakerx-jupyterlab
  args:
    executable: /bin/bash
  become_user: rmchale
  when: labx_env_exists.stdout == "no"

- name: jupyter running
  shell:  ps cax |grep -q jupyter && echo "yes" || echo "no"
  register: jupyter_running

- name: run jupyter
  shell: |
    PATH="$HOME/anaconda/bin:$PATH" &&  source $HOME/anaconda/bin/activate labx && screen -dmS test 'jupyter-lab'
    sleep 1
  args:
    executable: /bin/bash
  become_user: rmchale
  when: jupyter_running.stdout == "no"

- name: check for vim
  shell: grep -q vim $HOME/.bashrc && echo "yes" || echo "no"
  become_user: rmchale
  register: vim_setup

- lineinfile:
    path: $HOME/.bashrc
    line: 'export EDITOR=vim'
  when: vim_setup.stdout == "no"
  become_user: rmchale

- name: check for samples
  shell: test -d samples && echo "yes" || echo "no"
  register: samples_exist
  become_user: rmchale

- name: beakerx samples
  shell: |
    git clone --depth 1 https://github.com/twosigma/beakerx 
    cd beakerx
    git filter-branch --prune-empty --subdirectory-filter doc HEAD
    cd ..
    mv beakerx samples
  when: samples_exist.stdout == "no"
  become: rmchale
